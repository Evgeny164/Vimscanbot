import logging
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
import os

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher(bot)

# ‚Äî‚Äî‚Äî –ë–ê–ó–´ –ó–ù–ê–ù–ò–ô ‚Äî‚Äî‚Äî

vitamin_knowledge = {
    "–≤–∏—Ç–∞–º–∏–Ω a": {
        "—Ä–æ–ª—å": "–ó—Ä–µ–Ω–∏–µ, —Ä–æ—Å—Ç –∫–ª–µ—Ç–æ–∫, –∏–º–º—É–Ω–∏—Ç–µ—Ç",
        "–¥–µ—Ñ–∏—Ü–∏—Ç": "–ù–æ—á–Ω–∞—è —Å–ª–µ–ø–æ—Ç–∞, —Å—É—Ö–æ—Å—Ç—å –∫–æ–∂–∏",
        "—Ñ–æ—Ä–º—ã": "–†–µ—Ç–∏–Ω–æ–ª, –±–µ—Ç–∞-–∫–∞—Ä–æ—Ç–∏–Ω",
        "–¥–æ–∑–∏—Ä–æ–≤–∫–∞": "700‚Äì900 –º–∫–≥ –≤ –¥–µ–Ω—å"
    },
    "–≤–∏—Ç–∞–º–∏–Ω b1": {
        "—Ä–æ–ª—å": "–ú–µ—Ç–∞–±–æ–ª–∏–∑–º —É–≥–ª–µ–≤–æ–¥–æ–≤, –Ω–µ—Ä–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞",
        "–¥–µ—Ñ–∏—Ü–∏—Ç": "–°–ª–∞–±–æ—Å—Ç—å, –Ω–µ–≤—Ä–∏—Ç—ã",
        "—Ñ–æ—Ä–º—ã": "–¢–∏–∞–º–∏–Ω –º–æ–Ω–æ–Ω–∏—Ç—Ä–∞—Ç",
        "–¥–æ–∑–∏—Ä–æ–≤–∫–∞": "1.1‚Äì1.2 –º–≥ –≤ –¥–µ–Ω—å"
    },
    "–≤–∏—Ç–∞–º–∏–Ω b2": {
        "—Ä–æ–ª—å": "–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –æ–±–º–µ–Ω, –∫–æ–∂–∞",
        "–¥–µ—Ñ–∏—Ü–∏—Ç": "–¢—Ä–µ—â–∏–Ω—ã –≤ —É–≥–æ–ª–∫–∞—Ö —Ä—Ç–∞, –¥–µ—Ä–º–∞—Ç–∏—Ç",
        "—Ñ–æ—Ä–º—ã": "–†–∏–±–æ—Ñ–ª–∞–≤–∏–Ω",
        "–¥–æ–∑–∏—Ä–æ–≤–∫–∞": "1.1‚Äì1.3 –º–≥ –≤ –¥–µ–Ω—å"
    },
    # ‚Ä¶ –¥–æ–±–∞–≤—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∏—Ç–∞–º–∏–Ω—ã –ø–æ –æ–±—Ä–∞–∑—Ü—É ‚Ä¶
    "–≤–∏—Ç–∞–º–∏–Ω d": {
        "—Ä–æ–ª—å": "–†–µ–≥—É–ª—è—Ü–∏—è –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞ –∏ –º–µ—Ç–∞–±–æ–ª–∏–∑–º–∞ –∫–∞–ª—å—Ü–∏—è",
        "—Ü–µ–ª—å": "25(OH)D = 50‚Äì80 –Ω–≥/–º–ª",
        "–¥–µ—Ñ–∏—Ü–∏—Ç": "–°–ª–∞–±–æ—Å—Ç—å, —á–∞—Å—Ç—ã–µ –∏–Ω—Ñ–µ–∫—Ü–∏–∏, —É—Å—Ç–∞–ª–æ—Å—Ç—å",
        "—Ñ–æ—Ä–º—ã": "D3 + K2 (–ú–ö-7)",
        "–¥–æ–∑–∏—Ä–æ–≤–∫–∞": "2000‚Äì5000 –ú–ï/—Å—É—Ç"
    },
    "–≤–∏—Ç–∞–º–∏–Ω b12": {
        "—Ä–æ–ª—å": "–ö—Ä–æ–≤–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ, –Ω–µ—Ä–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞",
        "–∞–Ω–∞–ª–∏–∑—ã": "B12, –≥–æ–º–æ—Ü–∏—Å—Ç–µ–∏–Ω, MMA",
        "—Ñ–æ—Ä–º—ã": "–ú–µ—Ç–∏–ª–∫–æ–±–∞–ª–∞–º–∏–Ω, –∞–¥–µ–Ω–æ–∑–∏–ª–∫–æ–±–∞–ª–∞–º–∏–Ω",
        "–¥–æ–∑–∏—Ä–æ–≤–∫–∞": "500‚Äì1000 –º–∫–≥ –≤ –¥–µ–Ω—å"
    },
}

mineral_knowledge = {
    "–º–∞–≥–Ω–∏–π": {
        "—Ä–æ–ª—å": "–†–∞–±–æ—Ç–∞ –º—ã—à—Ü –∏ –Ω–µ—Ä–≤–æ–≤, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–µ—Ä–¥–µ—á–Ω–æ–≥–æ —Ä–∏—Ç–º–∞",
        "–¥–µ—Ñ–∏—Ü–∏—Ç": "–°—É–¥–æ—Ä–æ–≥–∏, –º—ã—à–µ—á–Ω–∞—è —Å–ª–∞–±–æ—Å—Ç—å, –∞—Ä–∏—Ç–º–∏—è",
        "—Ñ–æ—Ä–º—ã": "–ú–∞–≥–Ω–∏–π —Ü–∏—Ç—Ä–∞—Ç, –º–∞–≥–Ω–∏–π –≥–ª–∏—Ü–∏–Ω–∞—Ç",
        "–¥–æ–∑–∏—Ä–æ–≤–∫–∞": "300‚Äì400 –º–≥ –≤ –¥–µ–Ω—å"
    },
    "—Ü–∏–Ω–∫": {
        "—Ä–æ–ª—å": "–ò–º–º—É–Ω–∏—Ç–µ—Ç, –∑–∞–∂–∏–≤–ª–µ–Ω–∏–µ —Ä–∞–Ω, —Å–∏–Ω—Ç–µ–∑ –±–µ–ª–∫–æ–≤",
        "–¥–µ—Ñ–∏—Ü–∏—Ç": "–ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–∂–µ–π, —Å–Ω–∏–∂–µ–Ω–∏–µ –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞",
        "—Ñ–æ—Ä–º—ã": "–¶–∏–Ω–∫ –ø–∏–∫–æ–ª–∏–Ω–∞—Ç, —Ü–∏–Ω–∫ –≥–ª—é–∫–æ–Ω–∞—Ç",
        "–¥–æ–∑–∏—Ä–æ–≤–∫–∞": "10‚Äì20 –º–≥ –≤ –¥–µ–Ω—å"
    },
    "–π–æ–¥": {
        "—Ä–æ–ª—å": "–§—É–Ω–∫—Ü–∏—è —â–∏—Ç–æ–≤–∏–¥–Ω–æ–π –∂–µ–ª–µ–∑—ã, –æ–±–º–µ–Ω –≤–µ—â–µ—Å—Ç–≤",
        "–¥–µ—Ñ–∏—Ü–∏—Ç": "–ó–æ–±, —Å–Ω–∏–∂–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏",
        "—Ñ–æ—Ä–º—ã": "–ô–æ–¥–∏–¥ –∫–∞–ª–∏—è",
        "–¥–æ–∑–∏—Ä–æ–≤–∫–∞": "150 –º–∫–≥ –≤ –¥–µ–Ω—å"
    },
    "–∫–∞–ª—å—Ü–∏–π": {
        "—Ä–æ–ª—å": "–ö–æ—Å—Ç–Ω–∞—è —Ç–∫–∞–Ω—å, —Å–≤–µ—Ä—Ç—ã–≤–∞–µ–º–æ—Å—Ç—å –∫—Ä–æ–≤–∏",
        "–¥–µ—Ñ–∏—Ü–∏—Ç": "–û—Å—Ç–µ–æ–ø–æ—Ä–æ–∑, —Å—É–¥–æ—Ä–æ–≥–∏",
        "—Ñ–æ—Ä–º—ã": "–ö–∞—Ä–±–æ–Ω–∞—Ç –∫–∞–ª—å—Ü–∏—è, —Ü–∏—Ç—Ä–∞—Ç –∫–∞–ª—å—Ü–∏—è",
        "–¥–æ–∑–∏—Ä–æ–≤–∫–∞": "1000‚Äì1200 –º–≥ –≤ –¥–µ–Ω—å"
    },
    "–∂–µ–ª–µ–∑–æ": {
        "—Ä–æ–ª—å": "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∫–∏—Å–ª–æ—Ä–æ–¥–∞, –∫—Ä–æ–≤–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ",
        "–¥–µ—Ñ–∏—Ü–∏—Ç": "–ê–Ω–µ–º–∏—è, —Å–ª–∞–±–æ—Å—Ç—å",
        "—Ñ–æ—Ä–º—ã": "–°—É–ª—å—Ñ–∞—Ç –∂–µ–ª–µ–∑–∞, –≥–ª—é–∫–æ–Ω–∞—Ç –∂–µ–ª–µ–∑–∞",
        "–¥–æ–∑–∏—Ä–æ–≤–∫–∞": "10‚Äì18 –º–≥ –≤ –¥–µ–Ω—å"
    },
    # ‚Ä¶ –∏ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–∏–Ω–µ—Ä–∞–ª—ã ‚Ä¶
}

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    await message.reply(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å –æ –≤–∏—Ç–∞–º–∏–Ω–∞—Ö –∏ –º–∏–Ω–µ—Ä–∞–ª–∞—Ö.\n\n"
        "üìñ –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–µ—â–µ—Å—Ç–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´–≤–∏—Ç–∞–º–∏–Ω d¬ª –∏–ª–∏ ¬´–º–∞–≥–Ω–∏–π¬ª), "
        "–∏ —è –≤—ã–≤–µ–¥—É –µ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏."
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
@dp.message_handler()
async def handle_query(message: types.Message):
    query = message.text.lower().strip()

    # –ü–æ–∏—Å–∫ –≤ –≤–∏—Ç–∞–º–∏–Ω–∞—Ö
    for name, info in vitamin_knowledge.items():
        if query in name:
            reply = f"üíä {name.capitalize()}\n"
            for k, v in info.items():
                reply += f"‚Ä¢ *{k.capitalize()}*: {v}\n"
            await message.reply(reply, parse_mode="Markdown")
            return

    # –ü–æ–∏—Å–∫ –≤ –º–∏–Ω–µ—Ä–∞–ª–∞—Ö
    for name, info in mineral_knowledge.items():
        if query in name:
            reply = f"üóø {name.capitalize()}\n"
            for k, v in info.items():
                reply += f"‚Ä¢ *{k.capitalize()}*: {v}\n"
            await message.reply(reply, parse_mode="Markdown")
            return

    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –Ω–∏ —Ç–∞–º, –Ω–∏ —Ç–∞–º
    await message.reply("üòï –ù–µ –Ω–∞—à—ë–ª —Ç–∞–∫–æ–≥–æ –≤–∏—Ç–∞–º–∏–Ω–∞ –∏–ª–∏ –º–∏–Ω–µ—Ä–∞–ª–∞ –≤ –±–∞–∑–µ.")

if __name__ == "__main__":
    logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    executor.start_polling(dp, skip_updates=True)
