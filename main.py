import logging
import json
import aiohttp
import os
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)

# –ë–æ—Ç
bot = Bot(token=os.environ["BOT_TOKEN"])
dp = Dispatcher(bot)

# –°—Å—ã–ª–∫–∏ –Ω–∞ GitHub
VITAMINS_URL = "https://raw.githubusercontent.com/Evgeny164/Vimscanbot/main/knowledge/vitamins.json"
MINERALS_URL = "https://raw.githubusercontent.com/Evgeny164/Vimscanbot/main/knowledge/minerals.json"

vitamin_knowledge = {}
mineral_knowledge = {}

# –û–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É
@dp.message_handler(commands=["–æ–±–Ω–æ–≤–∏—Ç—å_–±–∞–∑—É"])
async def update_base(message: types.Message):
    global vitamin_knowledge, mineral_knowledge
    async with aiohttp.ClientSession() as session:
        # –í–∏—Ç–∞–º–∏–Ω—ã
        async with session.get(VITAMINS_URL) as resp1:
            if resp1.status == 200:
                vitamin_knowledge = json.loads(await resp1.text())
                logging.info("‚úÖ Vitamins base loaded.")
            else:
                logging.warning("‚ùå Failed to load vitamins.json")
        # –ú–∏–Ω–µ—Ä–∞–ª—ã
        async with session.get(MINERALS_URL) as resp2:
            if resp2.status == 200:
                mineral_knowledge = json.loads(await resp2.text())
                logging.info("‚úÖ Minerals base loaded.")
            else:
                logging.warning("‚ùå Failed to load minerals.json")

    await message.reply("‚úÖ –ë–∞–∑–∞ –≤–∏—Ç–∞–º–∏–Ω–æ–≤ –∏ –º–∏–Ω–µ—Ä–∞–ª–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler()
async def handle_query(message: types.Message):
    query = message.text.lower().strip()
    logging.info(f"üîç User asked: {query}")

    # –í–∏—Ç–∞–º–∏–Ω—ã
    for name, info in vitamin_knowledge.items():
        if query in name.lower():
            reply = f"üíä *{name}*\n"
            for k, v in info.items():
                reply += f"‚Ä¢ **{k.capitalize()}**: {v}\n"
            await message.reply(reply, parse_mode="Markdown")
            return

    # –ú–∏–Ω–µ—Ä–∞–ª—ã
    for name, info in mineral_knowledge.items():
        if query in name.lower():
            reply = f"üß™ *{name}*\n"
            for k, v in info.items():
                reply += f"‚Ä¢ **{k.capitalize()}**: {v}\n"
            await message.reply(reply, parse_mode="Markdown")
            return

    await message.reply("üòî –ù–µ –Ω–∞—à—ë–ª —Ç–∞–∫–æ–≥–æ –≤–∏—Ç–∞–º–∏–Ω–∞ –∏–ª–∏ –º–∏–Ω–µ—Ä–∞–ª–∞ –≤ –±–∞–∑–µ.")

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    executor.start_polling(dp, skip_updates=True)
