–ï–≤–≥–µ–Ω–∏–π –ï—Ñ—Ä–µ–º–æ–≤, [26.07.2025 20:59]
{
  "–≤–∏—Ç–∞–º–∏–Ω D": {
    "—Ä–æ–ª—å": "–†–µ–≥—É–ª—è—Ü–∏—è –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞ –∏ –º–µ—Ç–∞–±–æ–ª–∏–∑–º–∞ –∫–∞–ª—å—Ü–∏—è",
    "—Ü–µ–ª—å": "25(OH)D = 50‚Äì80 –Ω–≥/–º–ª",
    "–¥–µ—Ñ–∏—Ü–∏—Ç": "—Å–ª–∞–±–æ—Å—Ç—å, —á–∞—Å—Ç—ã–µ –∏–Ω—Ñ–µ–∫—Ü–∏–∏, —É—Å—Ç–∞–ª–æ—Å—Ç—å",
    "—Ñ–æ—Ä–º—ã": "D3 + K2 (–ú–ö-7)",
    "–¥–æ–∑–∏—Ä–æ–≤–∫–∞": "2000‚Äì5000 –ú–ï/—Å—É—Ç"
  },
  "–≤–∏—Ç–∞–º–∏–Ω B12": {
    "—Ä–æ–ª—å": "–ö—Ä–æ–≤–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ, –Ω–µ—Ä–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞",
    "–∞–Ω–∞–ª–∏–∑—ã": "B12, –≥–æ–º–æ—Ü–∏—Å—Ç–µ–∏–Ω, MMA",
    "—Ñ–æ—Ä–º—ã": "–º–µ—Ç–∏–ª–∫–æ–±–∞–ª–∞–º–∏–Ω, –∞–¥–µ–Ω–æ–∑–∏–ª–∫–æ–±–∞–ª–∞–º–∏–Ω",
    "–¥–æ–∑–∏—Ä–æ–≤–∫–∞": "500‚Äì1000 –º–∫–≥ –≤ –¥–µ–Ω—å"
  }
}

–ï–≤–≥–µ–Ω–∏–π –ï—Ñ—Ä–µ–º–æ–≤, [26.07.2025 21:17]
{
  "–º–∞–≥–Ω–∏–π": {
    "—Ä–æ–ª—å": "–ê–Ω—Ç–∏—Å—Ç—Ä–µ—Å—Å, —Ä–µ–≥—É–ª—è—Ü–∏—è –Ω–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∏ –º—ã—à–µ—á–Ω–æ–≥–æ —Ç–æ–Ω—É—Å–∞",
    "–∞–Ω–∞–ª–∏–∑—ã": "Mg –≤ —Å—ã–≤–æ—Ä–æ—Ç–∫–µ, RBC –º–∞–≥–Ω–∏–π, –∫–∞–ª—å—Ü–∏–π/–º–∞–≥–Ω–∏–π",
    "–¥–µ—Ñ–∏—Ü–∏—Ç": "—Å—É–¥–æ—Ä–æ–≥–∏, —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å, –ü–ú–°, –∑–∞–ø–æ—Ä—ã",
    "–¥–æ–∑–∏—Ä–æ–≤–∫–∞": "300‚Äì600 –º–≥/—Å—É—Ç (—Ü–∏—Ç—Ä–∞—Ç, –º–∞–ª–∞—Ç, –≥–ª–∏—Ü–∏–Ω–∞—Ç)"
  },
  "—Ü–∏–Ω–∫": {
    "—Ä–æ–ª—å": "–ò–º–º—É–Ω–∏—Ç–µ—Ç, —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–∂–∏, —Ä–µ–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è",
    "–∞–Ω–∞–ª–∏–∑—ã": "—Ü–∏–Ω–∫ –≤ –ø–ª–∞–∑–º–µ, —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ Zn/Cu",
    "–¥–µ—Ñ–∏—Ü–∏—Ç": "–∞–∫–Ω–µ, –≤—ã–ø–∞–¥–µ–Ω–∏–µ –≤–æ–ª–æ—Å, —á–∞—Å—Ç—ã–µ –∏–Ω—Ñ–µ–∫—Ü–∏–∏",
    "–¥–æ–∑–∏—Ä–æ–≤–∫–∞": "15‚Äì30 –º–≥/—Å—É—Ç (–ø–∏–∫–æ–ª–∏–Ω–∞—Ç, —Ü–∏—Ç—Ä–∞—Ç)"
  },
  "–∂–µ–ª–µ–∑–æ": {
    "—Ä–æ–ª—å": "–ì–µ–º–æ–≥–ª–æ–±–∏–Ω, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∫–∏—Å–ª–æ—Ä–æ–¥–∞, —ç–Ω–µ—Ä–≥–∏—è",
    "–∞–Ω–∞–ª–∏–∑—ã": "–û–ñ–°–°, —Ñ–µ—Ä—Ä–∏—Ç–∏–Ω, —Å—ã–≤–æ—Ä–æ—Ç–æ—á–Ω–æ–µ –∂–µ–ª–µ–∑–æ",
    "–¥–µ—Ñ–∏—Ü–∏—Ç": "–∞–Ω–µ–º–∏—è, —Å–ª–∞–±–æ—Å—Ç—å, –≤—ã–ø–∞–¥–µ–Ω–∏–µ –≤–æ–ª–æ—Å",
    "–¥–æ–∑–∏—Ä–æ–≤–∫–∞": "20‚Äì60 –º–≥/—Å—É—Ç (–±–∏—Å–≥–ª–∏—Ü–∏–Ω–∞—Ç, —Å—É–ª—å—Ñ–∞—Ç)"
  },
  "–π–æ–¥": {
    "—Ä–æ–ª—å": "–©–∏—Ç–æ–≤–∏–¥–Ω–∞—è –∂–µ–ª–µ–∑–∞, —Å–∏–Ω—Ç–µ–∑ –≥–æ—Ä–º–æ–Ω–æ–≤ –¢3 –∏ –¢4",
    "–∞–Ω–∞–ª–∏–∑—ã": "–π–æ–¥ –≤ –º–æ—á–µ, –¢–¢–ì, –¢4—Å–≤, –¢3—Å–≤",
    "–¥–µ—Ñ–∏—Ü–∏—Ç": "—É—Å—Ç–∞–ª–æ—Å—Ç—å, –∑—è–±–∫–æ—Å—Ç—å, —É–∑–ª—ã –≤ –©–ñ",
    "–¥–æ–∑–∏—Ä–æ–≤–∫–∞": "150‚Äì250 –º–∫–≥/—Å—É—Ç (–∫–∞–ª–∏—è –π–æ–¥–∏–¥, –ª–∞–º–∏–Ω–∞—Ä–∏—è)"
  },
  "—Å–µ–ª–µ–Ω": {
    "—Ä–æ–ª—å": "–ê–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç, —â–∏—Ç–æ–≤–∏–¥–∫–∞, –∏–º–º—É–Ω–∏—Ç–µ—Ç",
    "–∞–Ω–∞–ª–∏–∑—ã": "Se –≤ —Å—ã–≤–æ—Ä–æ—Ç–∫–µ, GPx",
    "–¥–µ—Ñ–∏—Ü–∏—Ç": "–≤—ã–ø–∞–¥–µ–Ω–∏–µ –≤–æ–ª–æ—Å, —Å–ª–∞–±–æ—Å—Ç—å, –∞—É—Ç–æ–∏–º–º—É–Ω–∏—Ç–µ—Ç",
    "–¥–æ–∑–∏—Ä–æ–≤–∫–∞": "100‚Äì200 –º–∫–≥/—Å—É—Ç (—Å–µ–ª–µ–Ω–æ–º–µ—Ç–∏–æ–Ω–∏–Ω)"
  }
}

–ï–≤–≥–µ–Ω–∏–π –ï—Ñ—Ä–µ–º–æ–≤, [26.07.2025 21:37]
import logging
import json
import aiohttp
import os
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)

# Telegram —Ç–æ–∫–µ–Ω
bot = Bot(token=os.environ["BOT_TOKEN"])
dp = Dispatcher(bot)

# –°—Å—ã–ª–∫–∏ –Ω–∞ GitHub –±–∞–∑—ã
VITAMINS_URL = "https://raw.githubusercontent.com/Evgeny164/Vimscanbot/main/knowledge/vitamins.json"
MINERALS_URL = "https://raw.githubusercontent.com/Evgeny164/Vimscanbot/main/knowledge/minerals.json"

vitamin_knowledge = {}
mineral_knowledge = {}

# –ö–æ–º–∞–Ω–¥–∞: /–æ–±–Ω–æ–≤–∏—Ç—å_–±–∞–∑—É
@dp.message_handler(commands=["–æ–±–Ω–æ–≤–∏—Ç—å_–±–∞–∑—É"])
async def update_base(message: types.Message):
    global vitamin_knowledge, mineral_knowledge
    async with aiohttp.ClientSession() as session:
        async with session.get(VITAMINS_URL) as resp1:
            if resp1.status == 200:
                text = await resp1.text()
                vitamin_knowledge = json.loads(text)
        async with session.get(MINERALS_URL) as resp2:
            if resp2.status == 200:
                text = await resp2.text()
                mineral_knowledge = json.loads(text)
    await message.reply("‚úÖ –ë–∞–∑–∞ –≤–∏—Ç–∞–º–∏–Ω–æ–≤ –∏ –º–∏–Ω–µ—Ä–∞–ª–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler()
async def handle_query(message: types.Message):
    query = message.text.lower().strip()
    logging.info(f"üîç User asked: {query}")

    # –ü–æ–∏—Å–∫ –≤ –≤–∏—Ç–∞–º–∏–Ω–∞—Ö
    for name, info in vitamin_knowledge.items():
        if query in name.lower():
            response = f"üíä *{name}*\n"
            for k, v in info.items():
                response += f"‚Ä¢ **{k.capitalize()}**: {v}\n"
            await message.reply(response, parse_mode="Markdown")
            return

    # –ü–æ–∏—Å–∫ –≤ –º–∏–Ω–µ—Ä–∞–ª–∞—Ö
    for name, info in mineral_knowledge.items():
        if query in name.lower():
            response = f"üß™ *{name}*\n"
            for k, v in info.items():
                response += f"‚Ä¢ **{k.capitalize()}**: {v}\n"
            await message.reply(response, parse_mode="Markdown")
            return

    await message.reply("üòî –ù–µ –Ω–∞—à—ë–ª —Ç–∞–∫–æ–≥–æ –≤–∏—Ç–∞–º–∏–Ω–∞ –∏–ª–∏ –º–∏–Ω–µ—Ä–∞–ª–∞ –≤ –±–∞–∑–µ.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    executor.start_polling(dp, skip_updates=True)
