import logging
import json
import aiohttp
import os
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor

# Telegram —Ç–æ–∫–µ–Ω
bot = Bot(token=os.environ["BOT_TOKEN"])
dp = Dispatcher(bot)

# URL –Ω–∞ vitamins.json —Å GitHub
VITAMINS_URL = "https://raw.githubusercontent.com/Evgeny164/Vimscanbot/main/knowledge/vitamins.json"
vitamin_knowledge = {}  # –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–∞—è –±–∞–∑–∞

# –ö–æ–º–∞–Ω–¥–∞: –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –∏–∑ GitHub
@dp.message_handler(commands=["–æ–±–Ω–æ–≤–∏—Ç—å_–±–∞–∑—É"])
async def update_base(message: types.Message):
    global vitamin_knowledge
    async with aiohttp.ClientSession() as session:
        async with session.get(VITAMINS_URL) as resp:
            if resp.status == 200:
                data = await resp.text()
                vitamin_knowledge = json.loads(data)
                await message.reply("‚úÖ –ë–∞–∑–∞ –≤–∏—Ç–∞–º–∏–Ω–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
            else:
                await message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: –≤–∏—Ç–∞–º–∏–Ω D / –≤–∏—Ç–∞–º–∏–Ω B12 –∏ —Ç.–ø.
@dp.message_handler(lambda msg: msg.text.lower().startswith("–≤–∏—Ç–∞–º–∏–Ω"))
async def reply_about_vitamin(message: types.Message):
    query = message.text.lower()
    for name, info in vitamin_knowledge.items():
        if name.lower() in query:
            reply = f"üíä *{name}*\n"
            for key, value in info.items():
                reply += f"‚Ä¢ **{key.capitalize()}**: {value}\n"
            await message.reply(reply, parse_mode="Markdown")
            return
    await message.reply("–ù–µ –Ω–∞—à—ë–ª —Ç–∞–∫–æ–≥–æ –≤–∏—Ç–∞–º–∏–Ω–∞ üòî")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    executor.start_polling(dp, skip_updates=True) 
